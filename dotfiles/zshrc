#---+----1----+----2----+----3----+----4----+----5----+----6----+----7----+----8
# 関数定義
#---+----1----+----2----+----3----+----4----+----5----+----6----+----7----+----8
###
# 現在のパスの後ろに指定したパスを追加する
# その際、重複したパス指定は無視される
###
append_path() { export PATH=$PATH:$1 }

###
# 現在のパスの前に指定したパスを追加する
# その際、重複したパス指定は無視される
###
prepend_path() { export PATH=$1:$PATH }

###
# pecoでヒストリーを選択する
###
function peco-select-history() {
    local tac
    if which tac > /dev/null; then
        tac="tac"
    else
        tac="tail -r"
    fi
    BUFFER=$(history -n 1 | eval $tac | peco --query "$LBUFFER")
    CURSOR=$#BUFFER
    zle clear-screen
}

###
# pecoでスニペットを選択する
###
function peco-select-snippets() {
    BUFFER=$(grep -v "^#" ~/.snippets | peco --query "$LBUFFER")
    CURSOR=$#BUFFER
    zle clear-screen
}

###
# diffファイルをpecoで検索する
###
function peco-diff() {
    BUFFER=$(find . -maxdepth 1 -type f | peco --query "$LBUFFER")
    ARY=(`echo $BUFFER`)
    C=${#ARY[*]}
    if [ $C -eq 2 ] ; then
        echo $BUFFER | xargs diff -ub
    fi
}

#---+----1----+----2----+----3----+----4----+----5----+----6----+----7----+----8
# 環境変数の設定
#---+----1----+----2----+----3----+----4----+----5----+----6----+----7----+----8
# 重複パスを登録しない
typeset -U PATH
typeset -U sudo_path

# 補完関数のパスを設定
fpath=(${HOME}/.zsh/functions ${fpath})
fpath=(${HOME}/.zsh/modules/zsh-completions/src ${fpath})

# 追加パスを設定
prepend_path "/usr/local/bin"
prepend_path "${HOME}/bin"

# sudo用パスの設定
typeset -xT SUDO_PATH sudo_path
sudo_path=({,/usr/pkg,/usr/local,/usr}/sbin(N-/))

#---+----1----+----2----+----3----+----4----+----5----+----6----+----7----+----8
# 基本設定
#---+----1----+----2----+----3----+----4----+----5----+----6----+----7----+----8
export LANG=ja_JP.UTF-8                          # LANG設定
export EDITOR=vim                                # EDITOR設定
export TERM=xterm-256color                       # ターミナル設定
REPORTTIME=3                                     # 実行時間
#export WORDCHARS='*?-[]~\!#%^(){}<>|`@#%^*()+:?' # 単語として認識したい文字

# 色設定
export LSCOLORS=gxfxcxdxbxegedabagacad
export LS_COLORS='di=36:ln=35:so=32:pi=33:ex=31:bd=46;34:cd=43;34:su=41;30:sg=46;30:tw=42;30:ow=43;30'

#---+----1----+----2----+----3----+----4----+----5----+----6----+----7----+----8
# ログ設定
#---+----1----+----2----+----3----+----4----+----5----+----6----+----7----+----8
HISTFILE=${HOME}/.zsh_history           # ヒストリーファイルのパス
HISTSIZE=10000000                       # 履歴件数：メモリ
SAVEHIST=${HISTSIZE}                    # 履歴変数：ファイル
setopt hist_ignore_dups                 # ヒストリーの重複を防ぐ
setopt share_history                    # 複数端末間でヒストリーを共有する
#setopt extended_history                # ヒストリーに実行時刻・時間を保存する
setopt inc_append_history               # すぐにヒストリーファイルに追記する
function history-all { history -E 1 }   # 全てのヒストリーを表示する関数

#---+----1----+----2----+----3----+----4----+----5----+----6----+----7----+----8
# 補完設定
#---+----1----+----2----+----3----+----4----+----5----+----6----+----7----+----8
autoload -U compinit
compinit -u

#setopt COMPLETE_IN_WORD     # コマンド自動修正機能をON
setopt glob_complete        # globを展開しないで候補の一覧から補完する。
setopt hist_expand          # 補完時にヒストリを自動展開する
setopt numeric_glob_sort    # 補完リストを数字順に並べる
setopt mark_dirs            # パスがディレクトリの場合に最後「/」付与
setopt print_eight_bit      # 出力時8ビットを通す
setopt magic_equal_subst    # 〜等以降にファイル名展開を行う

# 補完メニューを使用する
zstyle ':completion:*:default' menu select=2

# 補完候補に色をつける
#zstyle ':completion:*:default' list-colors
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}

# 補完候補をグループ化
zstyle ':completion:*' format '%B%d%b'
zstyle ':completion:*' group-name ''

# sudoの場合はSUDO_PATHも利用する
zstyle ':completion:sudo:*' environ PATH="$SUDO_PATH:$PATH"

# 補完キャッシュを利用する
zstyle ':completion:*' use-cache yes

# 詳細を表示する
zstyle ':completion:*' verbose yes

#---+----1----+----2----+----3----+----4----+----5----+----6----+----7----+----8
# peco設定
#---+----1----+----2----+----3----+----4----+----5----+----6----+----7----+----8
zle -N peco-select-history
zle -N peco-select-snippets
bindkey '^r' peco-select-history
bindkey '^x' peco-select-snippets

#---+----1----+----2----+----3----+----4----+----5----+----6----+----7----+----8
# エイリアス設定
#---+----1----+----2----+----3----+----4----+----5----+----6----+----7----+----8
alias ls="ls -G -w"
alias ll='ls -G -w -al | peco'
alias la='ls -G -w -a'
alias where="command -v"
alias j="jobs -l"
alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'
alias cls='clear'
alias lf="ls -F"
alias du="du -h"
alias df="df -h"
alias vi="vim"
alias sudo="sudo PATH=$PATH"

alias lp='ls -G -w -a | peco'
alias pp='ps aux | peco'
alias pk='ps -ef | peco | awk '\''{ print $2 }'\'' | xargs kill'


#---+----1----+----2----+----3----+----4----+----5----+----6----+----7----+----8
# ディレクトリ移動設定
#---+----1----+----2----+----3----+----4----+----5----+----6----+----7----+----8
setopt auto_cd      # ディレクトリ名が指定された場合はcd
setopt auto_pushd   # cdでディレクトリスタックに追加
cdpath=(~)          # カレントに無いディレクトリが指定された場合に検索して移動

# ディレクトリ移動後にlsを行う
chpwd() {
    ls_abbrev
}
ls_abbrev() {
    # -a : Do not ignore entries starting with ..
    # -C : Force multi-column output.
    # -F : Append indicator (one of */=>@|) to entries.
    local cmd_ls='ls'
    local -a opt_ls
    opt_ls=('-aCF' '--color=always')
    case "${OSTYPE}" in
        freebsd*|darwin*)
            if type gls > /dev/null 2>&1; then
                cmd_ls='gls'
            else
                # -G : Enable colorized output.
                opt_ls=('-aCFG')
            fi
            ;;
    esac

    local ls_result
    ls_result=$(CLICOLOR_FORCE=1 COLUMNS=$COLUMNS command $cmd_ls ${opt_ls[@]} | sed $'/^\e\[[0-9;]*m$/d')

    local ls_lines=$(echo "$ls_result" | wc -l | tr -d ' ')

    if [ $ls_lines -gt 10 ]; then
        echo "$ls_result" | head -n 5
        echo '...'
        echo "$ls_result" | tail -n 5
        echo "$(command ls -1 -A | wc -l | tr -d ' ') files exist"
    else
        echo "$ls_result"
    fi
}

#---+----1----+----2----+----3----+----4----+----5----+----6----+----7----+----8
# grepの設定
#---+----1----+----2----+----3----+----4----+----5----+----6----+----7----+----8
# デフォルトオプション指定
export GREP_OPTIONS

# バイナリファイルは無視
GREP_OPTIONS="--binary-files=without-match ${GREP_OPTIONS}"

# 拡張子「.tmp」のファイルは無視
GREP_OPTIONS="--exclude=\*.tmp ${GREP_OPTIONS}"

# 管理系のディレクトリを無視する
GREP_OPTIONS="--exclude-dir=.svn ${GREP_OPTIONS}"
GREP_OPTIONS="--exclude-dir=.git ${GREP_OPTIONS}"

# 結果に色づけを行う
GREP_OPTIONS="--color=auto ${GREP_OPTIONS}"

#---+----1----+----2----+----3----+----4----+----5----+----6----+----7----+----8
# コンソールの設定
#---+----1----+----2----+----3----+----4----+----5----+----6----+----7----+----8
autoload -U colors zsh/terminfo
colors
setopt prompt_subst

source ${HOME}/.zsh/256colorlib.sh
local HOSTC=$'%{\e[48;5;'"$(printf "%d\n" 0x$(hostname|md5sum|cut -c1-2))"'m%}'
local DEFAULTC=$'%{\e[m%}'

case "${OSTYPE}" in
darwin*)
    local ETH0IPADDR=`ifconfig en0 | grep "inet " | grep "broadcast" | sed "s/.*inet \([0-9]*\.[0-9]*\.[0-9]*\.[0-9]*\).*/\1/"`
    ;;
linux*)
    local ETH0IPADDR=`ip addr show eth0 | grep "inet " | head -1 | sed "s/.*inet \([0-9]*\.[0-9]*\.[0-9]*\.[0-9]*\).*/\1/"`
    ;;
esac

local p_dir="\
${HOSTC} ${ETH0IPADDR} ${DEFAULTC}\
%K{019}%F{069} %n %f%k\
%K{136}%F{220} @ %f%k\
%K{161}%F{212} %m %f%k\
%K{023}%F{082} %~ %f%k\
"
local p_mark="%(?,%F{83},%F{162})%(!,#,%%)%f"

local pl_line1="${p_dir}"
local pl_line2="${p_mark}"

PROMPT="${pl_line1}"$'\n'"${pl_line2} "

#---+----1----+----2----+----3----+----4----+----5----+----6----+----7----+----8
# バージョン管理の情報
#---+----1----+----2----+----3----+----4----+----5----+----6----+----7----+----8
RPROMPT=""

autoload -Uz vcs_info
autoload -Uz add-zsh-hook
autoload -Uz is-at-least
autoload -Uz colors

# 以下の3つのメッセージをエクスポートする
#   $vcs_info_msg_0_ : 通常メッセージ用 (緑)
#   $vcs_info_msg_1_ : 警告メッセージ用 (黄色)
#   $vcs_info_msg_2_ : エラーメッセージ用 (赤)
zstyle ':vcs_info:*' max-exports 3

zstyle ':vcs_info:*' enable git svn hg bzr
# 標準のフォーマット(git 以外で使用)
# misc(%m) は通常は空文字列に置き換えられる
zstyle ':vcs_info:*' formats '(%s)-[%b]'
zstyle ':vcs_info:*' actionformats '(%s)-[%b]' '%m' '<!%a>'
zstyle ':vcs_info:(svn|bzr):*' branchformat '%b:r%r'
zstyle ':vcs_info:bzr:*' use-simple true


if is-at-least 4.3.10; then
    # git 用のフォーマット
    # git のときはステージしているかどうかを表示
    zstyle ':vcs_info:git:*' formats '(%s)-[%b]' '%c%u %m'
    zstyle ':vcs_info:git:*' actionformats '(%s)-[%b]' '%c%u %m' '<!%a>'
    zstyle ':vcs_info:git:*' check-for-changes true
    zstyle ':vcs_info:git:*' stagedstr "+"    # %c で表示する文字列
    zstyle ':vcs_info:git:*' unstagedstr "-"  # %u で表示する文字列
fi

# hooks 設定
if is-at-least 4.3.11; then
    # git のときはフック関数を設定する

    # formats '(%s)-[%b]' '%c%u %m' , actionformats '(%s)-[%b]' '%c%u %m' '<!%a>'
    # のメッセージを設定する直前のフック関数
    # 今回の設定の場合はformat の時は2つ, actionformats の時は3つメッセージがあるので
    # 各関数が最大3回呼び出される。
    zstyle ':vcs_info:git+set-message:*' hooks \
                                            git-hook-begin \
                                            git-untracked \
                                            git-push-status \
                                            git-nomerge-branch \
                                            git-stash-count

    # フックの最初の関数
    # git の作業コピーのあるディレクトリのみフック関数を呼び出すようにする
    # (.git ディレクトリ内にいるときは呼び出さない)
    # .git ディレクトリ内では git status --porcelain などがエラーになるため
    function +vi-git-hook-begin() {
        if [[ $(command git rev-parse --is-inside-work-tree 2> /dev/null) != 'true' ]]; then
            # 0以外を返すとそれ以降のフック関数は呼び出されない
            return 1
        fi

        return 0
    }

    # untracked フィアル表示
    #
    # untracked ファイル(バージョン管理されていないファイル)がある場合は
    # unstaged (%u) に ? を表示
    function +vi-git-untracked() {
        # zstyle formats, actionformats の2番目のメッセージのみ対象にする
        if [[ "$1" != "1" ]]; then
            return 0
        fi

        if command git status --porcelain 2> /dev/null \
            | awk '{print $1}' \
            | command grep -F '??' > /dev/null 2>&1 ; then

            # unstaged (%u) に追加
            hook_com[unstaged]+='?'
        fi
    }

    # push していないコミットの件数表示
    #
    # リモートリポジトリに push していないコミットの件数を
    # pN という形式で misc (%m) に表示する
    function +vi-git-push-status() {
        # zstyle formats, actionformats の2番目のメッセージのみ対象にする
        if [[ "$1" != "1" ]]; then
            return 0
        fi

        if [[ "${hook_com[branch]}" != "master" ]]; then
            # master ブランチでない場合は何もしない
            return 0
        fi

        # push していないコミット数を取得する
        local ahead
        ahead=$(command git rev-list origin/master..master 2>/dev/null \
            | wc -l \
            | tr -d ' ')

        if [[ "$ahead" -gt 0 ]]; then
            # misc (%m) に追加
            hook_com[misc]+="(p${ahead})"
        fi
    }

    # マージしていない件数表示
    #
    # master 以外のブランチにいる場合に、
    # 現在のブランチ上でまだ master にマージしていないコミットの件数を
    # (mN) という形式で misc (%m) に表示
    function +vi-git-nomerge-branch() {
        # zstyle formats, actionformats の2番目のメッセージのみ対象にする
        if [[ "$1" != "1" ]]; then
            return 0
        fi

        if [[ "${hook_com[branch]}" == "master" ]]; then
            # master ブランチの場合は何もしない
            return 0
        fi

        local nomerged
        nomerged=$(command git rev-list master..${hook_com[branch]} 2>/dev/null | wc -l | tr -d ' ')

        if [[ "$nomerged" -gt 0 ]] ; then
            # misc (%m) に追加
            hook_com[misc]+="(m${nomerged})"
        fi
    }


    # stash 件数表示
    #
    # stash している場合は :SN という形式で misc (%m) に表示
    function +vi-git-stash-count() {
        # zstyle formats, actionformats の2番目のメッセージのみ対象にする
        if [[ "$1" != "1" ]]; then
            return 0
        fi

        local stash
        stash=$(command git stash list 2>/dev/null | wc -l | tr -d ' ')
        if [[ "${stash}" -gt 0 ]]; then
            # misc (%m) に追加
            hook_com[misc]+=":S${stash}"
        fi
    }

fi

function _update_vcs_info_msg() {
    local -a messages
    local prompt

    LANG=en_US.UTF-8 vcs_info

    if [[ -z ${vcs_info_msg_0_} ]]; then
        # vcs_info で何も取得していない場合はプロンプトを表示しない
        prompt=""
    else
        # vcs_info で情報を取得した場合
        # $vcs_info_msg_0_ , $vcs_info_msg_1_ , $vcs_info_msg_2_ を
        # それぞれ緑、黄色、赤で表示する
        [[ -n "$vcs_info_msg_0_" ]] && messages+=( "%F{green}${vcs_info_msg_0_}%f" )
        [[ -n "$vcs_info_msg_1_" ]] && messages+=( "%F{yellow}${vcs_info_msg_1_}%f" )
        [[ -n "$vcs_info_msg_2_" ]] && messages+=( "%F{red}${vcs_info_msg_2_}%f" )

        # 間にスペースを入れて連結する
        prompt="${(j: :)messages}"
    fi

    RPROMPT="$prompt"
}
add-zsh-hook precmd _update_vcs_info_msg


#---+----1----+----2----+----3----+----4----+----5----+----6----+----7----+----8
# プラグイン設定
#---+----1----+----2----+----3----+----4----+----5----+----6----+----7----+----8


#------------------------------------------------------------------------
# コマンドが指定秒数以上たって終了した場合は通知センターへ通知
#------------------------------------------------------------------------
alias pong='perl -nle '\''print "display notification \"$_\" with title \"Terminal\""'\'' | osascript'
preexec() {
    zsh_notify_cmd=$1
    zsh_notify_time=`date +%s`
}

precmd() {
    if (( $? == 0 )); then
        # message
        zsh_notify_status=done\!\!
    else
        zsh_notify_status=fail
    fi
    if [[ "${zsh_notify_cmd}" != "" ]]; then
        # time
        if (( `date +%s` - ${zsh_notify_time} > ${REPORTTIME} )); then
            echo ${zsh_notify_cmd} ${zsh_notify_status}  | pong
        fi
    fi
    zsh_notify_cmd=
}

#------------------------------------------------------------------------
# ローカル用設定ファイルを読み込む
#------------------------------------------------------------------------
[ -f ~/.zshrc.local ] && source ~/.zshrc.local

#------------------------------------------------------------------------
# homebrew用のgithubトークンを読み込む
#------------------------------------------------------------------------
[ -f ~/.zsh/brew_token ] && source ~/.zsh/brew_token

#------------------------------------------------------------------------
# nvm設定を読み込む
#------------------------------------------------------------------------
[[ -s ${HOME}/.nvm/nvm.sh ]] && . ${HOME}/.nvm/nvm.sh
